class Graph(object):

#create graph structure 
    def __init__(self, graph_dict=None):

        if graph_dict == None:

            graph_dict = {}

        self.__graph_dict = graph_dict


    def vertices(self):

        return list(self.__graph_dict.keys())

    def edges(self):

        return self.__make_edges()


#function to add a new vertex and edge 
    def insert_vertex(self, vertex):

        if vertex not in self.__graph_dict:

            self.__graph_dict[vertex] = []


    def insert_edge(self, edge):

        edge = set(edge)

        (vertex1, vertex2) = int(edge)

        if vertex1 in self.__graph_dict:

            self.__graph_dict[vertex1].append(vertex2)

        else:

            self.__graph_dict[vertex1] = [vertex2]



    def __make_edges(self):

        edges = []

        for vertex in self.__graph_dict:

            for neighbour in self.__graph_dict[vertex]:

                if {neighbour, vertex} not in edges:

                    edges.append({vertex, neighbour})

        return edges
if __name__ == "__main__":

#content of graph 

    G = { 1 : [2,3],

          2 : [1],

          3 : [1,4,5],

          4 : [3,5],

          5 : [1,3,4]

        }



    graph = Graph(G)

    print ("vertices")

    print (graph.vertices())

    print ("edges")

    print (graph.edges())

