#Based on the Python code or the C++ code provided in class as a starting point, implement the double linked list node delete function.

class Node(object):
      def __init__(self, value):
          self.value=value
          self.next=None
          self.prev=None
 
class List(object):
      def __init__(self):
          self.head=None
          self.tail=None
      def insert(self,n,x):
          #Not actually perfect: how do we prepend to an existing list?
          if n!=None:
              x.next=n.next
              n.next=x
              x.prev=n
              if x.next!=None:
                  x.next.prev=x              
          if self.head==None:
              self.head=self.tail=x
              x.prev=x.next=None
          elif self.tail==n:
              self.tail=x
      def display(self):
          values=[]
          n=self.head
          while n!=None:
              values.append(str(n.value))
              n=n.next
          print ("List: ",",".join(values))
#Delete function 
      def delete(self, x):
#check if list is empty
          if self.head==None:
              print ("Nothing to delete")
              return
            
#check if item to delete is even present 
          if self.head.next == None:
            if self.head.value == x:
                self.head = None
            else:
                print("item is not in List")
            return
            if self.head.value == x:    
                self.head = self.head.next
            self.head.prev = None
            return
            if self.head.value == x:    
                self.head = self.head.next
            self.head.prev = None
            return

            n = self.head
            while n.next is not None:
                if n.value == x:
                    break;
            n = n.next
            if n.next is not None:
                n.prev.next = n.next
            n.next.prev = n.prev
            if n.value == x:
                    n.prev.next = None
            else:
                print("item not found")


if __name__ == '__main__':
      l=List()
      #l.insert(None, Node(4))
      l.insert(l.head,Node(6))
      l.insert(l.head,Node(8))
      l.delete(6)
      l.display()
